{-# OPTIONS --without-K #-}
module horner where

open import Type
open import Type.Identities
open import Function.NP
open import Function.Extensionality
open import Data.Fin.NP using (Fin; Fin‚ñπ‚Ñï)
open import Data.Product renaming (proj‚ÇÅ to fst; proj‚ÇÇ to snd) hiding (map)
open import Data.Zero
open import Data.One
open import Data.Sum hiding (map)
open import Data.Nat.NP
open import Data.Nat.Properties
import Data.List as L
import Data.List.Properties as LP
open L using (List; []; _‚à∑_)
open import Relation.Binary.PropositionalEquality.NP
open import HoTT
--open import Explore.Fin

‚Ñï< : ‚Ñï ‚Üí Set
‚Ñï< n = Œ£ ‚Ñï Œª x ‚Üí x < n

sumFin : (n : ‚Ñï) (f : Fin n ‚Üí ‚Ñï) ‚Üí ‚Ñï
sumFin n f = {!!}

sum< : (n : ‚Ñï) (f : ‚Ñï< n ‚Üí ‚Ñï) ‚Üí ‚Ñï
sum< n f = {!!}

prod< : (n : ‚Ñï) (f : ‚Ñï< n ‚Üí ‚Ñï) ‚Üí ‚Ñï
prod< n f = {!!}

{-
foo : ‚àÄ n a x ‚Üí sumFin n Œª i ‚Üí a i * x ^ i
foo = ?

bar : ‚àÄ n a x ‚Üí sumFin n Œª i ‚Üí a i * x ^ i
bar = ?
-}

baz : ‚àÄ n (u : ‚Ñï< n ‚Üí ‚Ñï) ‚Üí (sum< n Œª { (i , p) ‚Üí prod< i (Œª { (j , q) ‚Üí u (j , <-trans q p) }) }) ‚â° {!!}
baz = {!!}

module _ n (u : ‚Ñï< n ‚Üí Set) {{_ : UA}} {{_ : FunExt}} where
    open ‚â°-Reasoning
    Baz : _ ‚â° _
    Baz = (Œ£ (‚Ñï< n) Œª { (i , p) ‚Üí Œ† (‚Ñï< i) Œª { (j , q) ‚Üí u (j , <-trans q p) } })
        ‚â°‚ü® ! Œ£-assoc ‚ü©
          (Œ£ ‚Ñï Œª i ‚Üí Œ£ (i < n) Œª p ‚Üí Œ† (‚Ñï< i) Œª { (j , q) ‚Üí u (j , <-trans q p) })
        ‚â°‚ü® Œ£=‚Ä≤ ‚Ñï (Œª i ‚Üí Œ£=‚Ä≤ (i < n) Œª p ‚Üí Œ†Œ£-curry) ‚ü©
          (Œ£ ‚Ñï Œª i ‚Üí Œ£ (i < n) Œª p ‚Üí Œ† ‚Ñï Œª j ‚Üí Œ† (j < i) Œª q ‚Üí u (j , <-trans q p))
        ‚àé

module DataVersion (A : ‚òÖ) where
    open import Data.Tree.Binary
    data T : BinTree A ‚Üí ‚òÖ where
      empty : T empty
      _‚äï_ : ‚àÄ {t u} ‚Üí (ùüô ‚äé T t √ó T u) ‚Üí T (fork t u)

module TypeVersion where
    Œµ = ùüô
    _‚äï_ : ‚òÖ ‚Üí ‚òÖ ‚Üí ‚òÖ
    _‚äï_ = Œª u z ‚Üí Œµ ‚äé u √ó z
    

module ListVersion where
    open L
    open ‚â°-Reasoning
    map-‚àò = LP.map-compose

    sum-lin : ‚àÄ k xs ‚Üí sum (map (_*_ k) xs) ‚â° k * sum xs
    sum-lin k []       = ‚Ñï¬∞.*-comm 0 k
    sum-lin k (x ‚à∑ xs) = k * x + sum (map (_*_ k) xs)
                       ‚â°‚ü® ap (_+_ (k * x)) (sum-lin k xs) ‚ü©
                          k * x + k * sum xs
                       ‚â°‚ü® ! fst ‚Ñï¬∞.distrib k x (sum xs) ‚ü©
                          k * (x + sum xs)
                       ‚àé

    lemma : ‚àÄ x xss ‚Üí sum (map product (map (_‚à∑_ x) xss)) ‚â° x * sum (map product xss)
    lemma x xss = sum (map product (map (_‚à∑_ x) xss))
                ‚â°‚ü® ap sum (! map-‚àò xss) ‚ü©
                  sum (map (product ‚àò _‚à∑_ x) xss)
                ‚â°‚ü®by-definition‚ü©
                  sum (map (_*_ x ‚àò product) xss)
                ‚â°‚ü® ap sum (map-‚àò xss) ‚ü©
                  sum (map (_*_ x) (map product xss))
                ‚â°‚ü® sum-lin x (map product xss) ‚ü©
                  x * sum (map product xss)
                ‚àé

    Œµ = 1
    _‚äï_ = Œª u z ‚Üí Œµ + u * z
    t3 = ‚àÄ xs ‚Üí sum (map product (inits xs)) ‚â° foldr _‚äï_ Œµ xs
    t4 : t3
    t4 [] = refl
    t4 (x ‚à∑ xs) = ap suc (lemma x (inits xs) ‚àô ap (_*_ x) (t4 xs))
