{-# OPTIONS --without-K #-}
-- The core types behind exploration functions
module Explore.Core where

open import Level.NP
open import Algebra
open import Type hiding (โ)
open import Function using (id; _โ_; _โโฒ_)
open import Data.Nat.NP using (โ)
open import Data.Two using (๐)
open import Data.Maybe.NP using (_โ?_)
open import Relation.Unary.Logical
open import Relation.Binary.Logical

module _ {a} where
    BigOp : โ {โ} โ โ โ โ โ a โ โ (a โ โ)
    BigOp M A = (A โ M) โ M

    Explore : โ โ โ โ_ a โ โ (a โ โ โ)
    Explore โ A = โ {M : โ โ} (ฮต : M) (_โ_ : M โ M โ M) โ BigOp M A

    BigOpMon : โ {c โ} โ Monoid c โ โ โ a โ โ _
    BigOpMon M A = BigOp (Monoid.Carrier M) A

    ExploreMon : โ c โ โ โ a โ โ _
    ExploreMon c โ A = (M : Monoid c โ) โ BigOpMon M A

    Exploreโ : โ a โ โ(a โ โ)
    Exploreโ = Explore โ

    Exploreโ : โ a โ โ(a โ โ)
    Exploreโ = Explore โ

    Sum : โ a โ โ a
    Sum = BigOp โ

    Product : โ a โ โ a
    Product = BigOp โ

    Count : โ a โ โ a
    Count A = (A โ ๐) โ โ

    Find? : โ {b} โ โ a โ โ(โ b โ a)
    Find? {b} A = โ {B : โ b} โ (A โ? B) โ? B

    FindKey : โ a โ โ a
    FindKey A = (A โ ๐) โ? A

-- These three basic combinators are defined here
-- since they are used to define ExploreInd
    module _ {โ} {A : โ a} where
        merge-explore : Explore โ A โ Explore โ A โ Explore โ A
        merge-explore eโ eโ ฮต _โ_ f = eโ ฮต _โ_ f โ eโ ฮต _โ_ f

        empty-explore : Explore โ A
        empty-explore ฮต _ _ = ฮต

        point-explore : A โ Explore โ A
        point-explore x _ _ f = f x

[Explore] : โ {a aโ} โ ([โโ] [โ] [โ] (โ (a โ aโ))) (Explore a)
[Explore] {a} {aโ} Aโ = โโจ Mโ โถ [โ] (a โ aโ)โฉ[โ] Mโ [โ] [Opโ] {_} {aโ} Mโ [โ] (Aโ [โ] Mโ) [โ] Mโ

module _ {โโ โโ} โแตฃ {aโ aโ aแตฃ} where
    โฆExploreโง : (โฆโโง {aโ} {aโ} aแตฃ โฆโโง โฆโโง (aโ โ aโ โ aแตฃ โ โ (โโ โ โโ โ โแตฃ))) (Explore โโ) (Explore โโ)
    โฆExploreโง Aแตฃ = โโจ Mแตฃ โถ โฆโโง (โโ โ โโ โ โแตฃ) โฉโฆโโง Mแตฃ โฆโโง โฆOpโโง {_} {_} {โแตฃ} Mแตฃ โฆโโง (Aแตฃ โฆโโง Mแตฃ) โฆโโง Mแตฃ

โฆExploreโงโ : (โฆโโโง โฆโโง โฆโโโง) (Explore _) (Explore _)
โฆExploreโงโ = โฆExploreโง _

-- -}
-- -}
-- -}
-- -}
