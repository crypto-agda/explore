{-# OPTIONS --without-K #-}
-- The core types behind exploration functions
module Explore.Core where

open import Level.NP
open import Algebra
open import Type hiding (โ)
open import Function using (id; _โ_; _โโฒ_)
open import Data.Nat.NP using (โ)
open import Data.Two using (๐)
open import Data.Maybe.NP using (_โ?_)
open import Relation.Unary.Logical
open import Relation.Binary.Logical

BigOp : โ {โ} โ โ โ โ โโ โ โ โ
BigOp M A = (A โ M) โ M

Explore : โ โ โ โโ โ โ โ โ
Explore โ A = โ {M : โ โ} (ฮต : M) (_โ_ : M โ M โ M) โ BigOp M A

BigOpMon : โ {c โ} โ Monoid c โ โ โโ โ โ _
BigOpMon M A = BigOp (Monoid.Carrier M) A

ExploreMon : โ c โ โ โโ โ โ _
ExploreMon c โ A = (M : Monoid c โ) โ BigOpMon M A

Exploreโ : โโ โ โโ
Exploreโ = Explore _

Exploreโ : โโ โ โโ
Exploreโ = Explore _

Sum : โโ โ โโ
Sum = BigOp โ

Product : โโ โ โโ
Product = BigOp โ

Count : โโ โ โโ
Count A = (A โ ๐) โ โ

Find? : โโ โ โโ
Find? A = โ {B : โโ} โ (A โ? B) โ? B

FindKey : โโ โ โโ
FindKey A = (A โ ๐) โ? A

[Explore] : โ a aโ โ ([โโ] [โ] [โ] (โ (a โ aโ))) (Explore a)
[Explore] a aโ Aโ = โโจ Mโ โถ [โ] (a โ aโ)โฉ[โ] Mโ [โ] [Opโ] {_} {aโ} Mโ [โ] (Aโ [โ] Mโ) [โ] Mโ

โฆExploreโง : (โฆโโโง โฆโโง โฆโโโง) (Explore _) (Explore _)
โฆExploreโง Aแตฃ = โโจ Mแตฃ โถ โฆโโโง โฉโฆโโง Mแตฃ โฆโโง โฆOpโโง Mแตฃ โฆโโง (Aแตฃ โฆโโง Mแตฃ) โฆโโง Mแตฃ

โฆExploreโงแตค : โ aโ aโ aแตฃ โ (โฆโโโง โฆโโง โฆโโง (โ (aโ โ aโ โ aแตฃ))) (Explore aโ) (Explore aโ)
โฆExploreโงแตค aโ aโ aแตฃ Aแตฃ = โโจ Mแตฃ โถ โฆโโง (aแตฃ โ aโ โ aโ) โฉโฆโโง Mแตฃ โฆโโง โฆOpโโง {_} {_} {aแตฃ} Mแตฃ โฆโโง (Aแตฃ โฆโโง Mแตฃ) โฆโโง Mแตฃ

-- Trimmed down version of โฆExploreโง
โฆExploreโงโ : โ {A : โ_ _} (Aแตฃ : A โ A โ โ_ _) โ Explore _ A โ โโ
โฆExploreโงโ Aแตฃ e = โฆExploreโง Aแตฃ e e

-- These three basic combinators are defined here
-- since they are used to define ExploreInd
module _ {โ A} where
    merge-explore : Explore โ A โ Explore โ A โ Explore โ A
    merge-explore eโ eโ ฮต _โ_ f = eโ ฮต _โ_ f โ eโ ฮต _โ_ f

    empty-explore : Explore โ A
    empty-explore ฮต _ _ = ฮต

    point-explore : A โ Explore โ A
    point-explore x _ _ f = f x

-- -}
-- -}
-- -}
-- -}
