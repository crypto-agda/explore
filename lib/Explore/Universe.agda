{-# OPTIONS --without-K #-}
open import Level.NP
open import Type
open import Type.Identities
open import Function.NP
open import Function.Extensionality
open import Data.Zero
open import Data.One
open import Data.Two
open import Data.Product.NP
open import Data.Sum.NP
open import Data.Sum.Logical
open import Data.Nat
open import Data.Fin
open import Relation.Nullary.NP
open import Relation.Binary.PropositionalEquality.NP
open import Relation.Binary.Logical
open import HoTT using (UA; module Equivalences)
open Equivalences

open import Explore.Core
open import Explore.Properties
open import Explore.Zero
open import Explore.One
open import Explore.Two
open import Explore.Product
open import Explore.Sum
open import Explore.Explorable

module Explore.Universe where

open Operators

module FromX (X : РўЁ) where
  infixr 2 _├ЌрхЂ_

  data U : РўЁ
  El : U Рєњ РўЁ

  data U where
    ­ЮЪўрхЂ ­ЮЪЎрхЂ ­ЮЪџрхЂ : U
    _├ЌрхЂ_ _РіјрхЂ_ : U Рєњ U Рєњ U
    ╬БрхЂ : (u : U) (f : El u Рєњ U) Рєњ U
    XрхЂ : U

  El ­ЮЪўрхЂ = ­ЮЪў
  El ­ЮЪЎрхЂ = ­ЮЪЎ
  El ­ЮЪџрхЂ = ­ЮЪџ
  El (uРѓђ ├ЌрхЂ uРѓЂ) = El uРѓђ ├Ќ El uРѓЂ
  El (uРѓђ РіјрхЂ uРѓЂ) = El uРѓђ Ріј El uРѓЂ
  El (╬БрхЂ u f) = ╬Б (El u) ╬╗ x Рєњ El (f x)
  El XрхЂ = X

  infix  8 _^рхЂ_
  _^рхЂ_ : U Рєњ РёЋ Рєњ U
  u ^рхЂ zero  = u
  u ^рхЂ suc n = u ├ЌрхЂ u ^рхЂ n

  FinрхЂ : РёЋ Рєњ U
  FinрхЂ zero    = ­ЮЪўрхЂ
  FinрхЂ (suc n) = ­ЮЪЎрхЂ РіјрхЂ FinрхЂ n

  FinрхЂ' : РёЋ Рєњ U
  FinрхЂ' zero          = ­ЮЪўрхЂ
  FinрхЂ' (suc zero)    = ­ЮЪЎрхЂ
  FinрхЂ' (suc (suc n)) = ­ЮЪЎрхЂ РіјрхЂ FinрхЂ' (suc n)

  FinрхЂ-Fin : Рѕђ n Рєњ El (FinрхЂ n) РЅЃ Fin n
  FinрхЂ-Fin zero    = РЅЃ-! Fin0РЅЃ­ЮЪў
  FinрхЂ-Fin (suc n) = РіјРЅЃ РЅЃ-refl (FinрхЂ-Fin n) РЅЃ-РѕЎ РЅЃ-! FinРѕўsucРЅЃ­ЮЪЎРіјFin

  FinрхЂ'-Fin : Рѕђ n Рєњ El (FinрхЂ' n) РЅЃ Fin n
  FinрхЂ'-Fin zero          = РЅЃ-! Fin0РЅЃ­ЮЪў
  FinрхЂ'-Fin (suc zero)    = РЅЃ-! Fin1РЅЃ­ЮЪЎ
  FinрхЂ'-Fin (suc (suc n)) = РіјРЅЃ РЅЃ-refl (FinрхЂ'-Fin (suc n)) РЅЃ-РѕЎ РЅЃ-! FinРѕўsucРЅЃ­ЮЪЎРіјFin

  module FromРЪдXРЪД (РЪдXРЪД : РЪдРўЁРѓђРЪД X X) where
    data РЪдUРЪД : РЪдРўЁРѓђРЪД U U
    РЪдElРЪД : (РЪдUРЪД РЪдРєњРЪД РЪдРўЁРѓђРЪД) El El

    data РЪдUРЪД where
      РЪд­ЮЪўрхЂРЪД : РЪдUРЪД ­ЮЪўрхЂ ­ЮЪўрхЂ
      РЪд­ЮЪЎрхЂРЪД : РЪдUРЪД ­ЮЪЎрхЂ ­ЮЪЎрхЂ
      РЪд­ЮЪџрхЂРЪД : РЪдUРЪД ­ЮЪџрхЂ ­ЮЪџрхЂ
      _РЪд├ЌрхЂРЪД_ : РЪдOpРѓѓРЪД РЪдUРЪД _├ЌрхЂ_ _├ЌрхЂ_
      _РЪдРіјрхЂРЪД_ : РЪдOpРѓѓРЪД РЪдUРЪД _РіјрхЂ_ _РіјрхЂ_
      РЪд╬БрхЂРЪД : (РЪе u РѕХ РЪдUРЪД РЪЕРЪдРєњРЪД (РЪдElРЪД u РЪдРєњРЪД РЪдUРЪД) РЪдРєњРЪД РЪдUРЪД) ╬БрхЂ ╬БрхЂ
      РЪдXрхЂРЪД : РЪдUРЪД XрхЂ XрхЂ

    РЪдElРЪД РЪд­ЮЪўрхЂРЪД = _РЅА_
    РЪдElРЪД РЪд­ЮЪЎрхЂРЪД = _РЅА_
    РЪдElРЪД РЪд­ЮЪџрхЂРЪД = _РЅА_
    РЪдElРЪД (uРѓђ РЪд├ЌрхЂРЪД uРѓЂ) = РЪдElРЪД uРѓђ РЪд├ЌРЪД РЪдElРЪД uРѓЂ
    РЪдElРЪД (uРѓђ РЪдРіјрхЂРЪД uРѓЂ) = РЪдElРЪД uРѓђ РЪдРіјРЪД РЪдElРЪД uРѓЂ
    РЪдElРЪД (РЪд╬БрхЂРЪД u f) = РЪд╬БРЪД (РЪдElРЪД u) ╬╗ x Рєњ РЪдElРЪД (f x)
    РЪдElРЪД РЪдXрхЂРЪД = РЪдXРЪД

  module FromXрхЅ (XрхЅ : Рѕђ {РёЊ} Рєњ Explore РёЊ X) where
    explore : Рѕђ {РёЊ} u Рєњ Explore РёЊ (El u)
    explore ­ЮЪўрхЂ = ­ЮЪўрхЅ
    explore ­ЮЪЎрхЂ = ­ЮЪЎрхЅ
    explore ­ЮЪџрхЂ = ­ЮЪџрхЅ
    explore (uРѓђ ├ЌрхЂ uРѓЂ) = explore uРѓђ ├ЌрхЅ explore uРѓЂ
    explore (uРѓђ РіјрхЂ uРѓЂ) = explore uРѓђ РіјрхЅ explore uРѓЂ
    explore (╬БрхЂ u f) = explore╬Б (explore u) ╬╗ {x} Рєњ explore (f x)
    explore XрхЂ = XрхЅ

    module FromXРЂ▒ (XРЂ▒ : Рѕђ {РёЊ p} Рєњ ExploreInd p (XрхЅ {РёЊ})) where
      exploreU-ind : Рѕђ {РёЊ p} u Рєњ ExploreInd {РёЊ} p (explore u)
      exploreU-ind ­ЮЪўрхЂ = ­ЮЪўРЂ▒
      exploreU-ind ­ЮЪЎрхЂ = ­ЮЪЎРЂ▒
      exploreU-ind ­ЮЪџрхЂ = ­ЮЪџРЂ▒
      exploreU-ind (uРѓђ ├ЌрхЂ uРѓЂ) = exploreU-ind uРѓђ ├ЌРЂ▒ exploreU-ind uРѓЂ
      exploreU-ind (uРѓђ РіјрхЂ uРѓЂ) = exploreU-ind uРѓђ РіјРЂ▒ exploreU-ind uРѓЂ
      exploreU-ind (╬БрхЂ u f) = explore╬Б-ind (exploreU-ind u) ╬╗ {x} Рєњ exploreU-ind (f x)
      exploreU-ind XрхЂ = XРЂ▒

      module _ (u : U) where
        private
          uрхЅ : Рѕђ {РёЊ} Рєњ Explore РёЊ (El u)
          uрхЅ = explore u
          uРЂ▒ : Рѕђ {РёЊ p} Рєњ ExploreInd {РёЊ} p uрхЅ
          uРЂ▒ = exploreU-ind u

        open FromExploreInd uРЂ▒ public hiding (РЪдexploreРЪД)

        ╬БрхЅU : Рѕђ {РёЊ} Рєњ (El u Рєњ РўЁ_ РёЊ) Рєњ РўЁ_ РёЊ
        ╬БрхЅU = ╬БрхЅ uрхЅ
        ╬архЅU : Рѕђ {РёЊ} Рєњ (El u Рєњ РўЁ_ РёЊ) Рєњ РўЁ_ РёЊ
        ╬архЅU = ╬архЅ uрхЅ

      module Xр┤▒ = FromExploreInd XРЂ▒
      ╬БрхЅX : Рѕђ {РёЊ} Рєњ (X Рєњ РўЁ_ РёЊ) Рєњ РўЁ_ РёЊ
      ╬БрхЅX = ╬БрхЅ XрхЅ
      ╬архЅX : Рѕђ {РёЊ} Рєњ (X Рєњ РўЁ_ РёЊ) Рєњ РўЁ_ РёЊ
      ╬архЅX = ╬архЅ XрхЅ

      module FromX╦б-ok (X╦б-ok : Adequate-sum Xр┤▒.sum){{_ : UA}}{{_ : FunExt}} where
        adequate-sumU : Рѕђ u Рєњ Adequate-sum (sum u)
        adequate-sumU ­ЮЪўрхЂ       = ­ЮЪў╦б-ok
        adequate-sumU ­ЮЪЎрхЂ       = ­ЮЪЎ╦б-ok
        adequate-sumU ­ЮЪџрхЂ       = ­ЮЪџ╦б-ok
        adequate-sumU (uРѓђ ├ЌрхЂ uРѓЂ) = adequate-sum╬Б (adequate-sumU uРѓђ) (adequate-sumU uРѓЂ)
        adequate-sumU (uРѓђ РіјрхЂ uРѓЂ) = adequate-sumРіј (adequate-sumU uРѓђ) (adequate-sumU uРѓЂ)
        adequate-sumU (╬БрхЂ u f) = adequate-sum╬Б (adequate-sumU u) (╬╗ {x} Рєњ adequate-sumU (f x))
        adequate-sumU XрхЂ = X╦б-ok

      module FromX╦А (X╦А : Рѕђ {РёЊ} Рєњ Lookup {РёЊ} XрхЅ) where
        lookupU : Рѕђ {РёЊ} u Рєњ Lookup {РёЊ} (explore u)
        lookupU ­ЮЪўрхЂ = ­ЮЪў╦А
        lookupU ­ЮЪЎрхЂ = ­ЮЪЎ╦А
        lookupU ­ЮЪџрхЂ = ­ЮЪџ╦А
        lookupU (uРѓђ ├ЌрхЂ uРѓЂ) = lookup├Ќ {eр┤г = explore uРѓђ} {eр┤« = explore uРѓЂ} (lookupU uРѓђ) (lookupU uРѓЂ)
        lookupU (uРѓђ РіјрхЂ uРѓЂ) = lookupРіј {eр┤г = explore uРѓђ} {eр┤« = explore uРѓЂ} (lookupU uРѓђ) (lookupU uРѓЂ)
        lookupU (╬БрхЂ u f) = lookup╬Б {eр┤г = explore u} {eр┤« = ╬╗ {x} Рєњ explore (f x)} (lookupU u) (╬╗ {x} Рєњ lookupU (f x))
        lookupU XрхЂ = X╦А

      module FromXрХа (XрХа : Рѕђ {РёЊ} Рєњ Focus {РёЊ} XрхЅ) where
        focusU : Рѕђ {РёЊ} u Рєњ Focus {РёЊ} (explore u)
        focusU ­ЮЪўрхЂ = ­ЮЪўрХа
        focusU ­ЮЪЎрхЂ = ­ЮЪЎрХа
        focusU ­ЮЪџрхЂ = ­ЮЪџрХа
        focusU (uРѓђ ├ЌрхЂ uРѓЂ) = focus├Ќ {eр┤г = explore uРѓђ} {eр┤« = explore uРѓЂ} (focusU uРѓђ) (focusU uРѓЂ)
        focusU (uРѓђ РіјрхЂ uРѓЂ) = focusРіј {eр┤г = explore uРѓђ} {eр┤« = explore uРѓЂ} (focusU uРѓђ) (focusU uРѓЂ)
        focusU (╬БрхЂ u f) = focus╬Б {eр┤г = explore u} {eр┤« = ╬╗ {x} Рєњ explore (f x)} (focusU u) (╬╗ {x} Рєњ focusU (f x))
        focusU XрхЂ = XрХа

      module From╬БрхЅX-ok (╬БрхЅX-ok : Рѕђ {РёЊ} Рєњ Adequate-╬Б {РёЊ} ╬БрхЅX){{_ : UA}}{{_ : FunExt}} where
        ╬БрхЅU-ok : Рѕђ {РёЊ} u Рєњ Adequate-╬Б {РёЊ} (╬БрхЅU u)
        ╬БрхЅU-ok ­ЮЪўрхЂ       = ╬БрхЅ­ЮЪў-ok
        ╬БрхЅU-ok ­ЮЪЎрхЂ       = ╬БрхЅ­ЮЪЎ-ok
        ╬БрхЅU-ok ­ЮЪџрхЂ       = ╬БрхЅ­ЮЪџ-ok
        ╬БрхЅU-ok (uРѓђ ├ЌрхЂ u) = ╬БрхЅ├Ќ-ok {eр┤г = explore uРѓђ} {eр┤« = explore u} (╬БрхЅU-ok uРѓђ) (╬БрхЅU-ok u)
        ╬БрхЅU-ok (uРѓђ РіјрхЂ u) = ╬БрхЅРіј-ok {eр┤г = explore uРѓђ} {eр┤« = explore u} (╬БрхЅU-ok uРѓђ) (╬БрхЅU-ok u)
        ╬БрхЅU-ok (╬БрхЂ u f) = ╬БрхЅ╬Б-ok {eр┤г = explore u} {eр┤« = ╬╗ {x} Рєњ explore (f x)} (╬БрхЅU-ok u) (╬╗ {x} Рєњ ╬БрхЅU-ok (f x))
        ╬БрхЅU-ok XрхЂ = ╬БрхЅX-ok

      module From╬архЅX-ok (╬архЅX-ok : Рѕђ {РёЊ} Рєњ Adequate-╬а {РёЊ} ╬архЅX){{_ : UA}}{{_ : FunExt}} where
        ╬архЅU-ok : Рѕђ {РёЊ} u Рєњ Adequate-╬а {РёЊ} (╬архЅU u)
        ╬архЅU-ok ­ЮЪўрхЂ       = ╬архЅ­ЮЪў-ok
        ╬архЅU-ok ­ЮЪЎрхЂ       = ╬архЅ­ЮЪЎ-ok
        ╬архЅU-ok ­ЮЪџрхЂ       = ╬архЅ­ЮЪџ-ok
        ╬архЅU-ok (uРѓђ ├ЌрхЂ u) = ╬архЅ├Ќ-ok {eр┤г = explore uРѓђ} {eр┤« = explore u} (╬архЅU-ok uРѓђ) (╬архЅU-ok u)
        ╬архЅU-ok (uРѓђ РіјрхЂ u) = ╬архЅРіј-ok {eр┤г = explore uРѓђ} {eр┤« = explore u} (╬архЅU-ok uРѓђ) (╬архЅU-ok u)
        ╬архЅU-ok (╬БрхЂ u f) = ╬архЅ╬Б-ok {eр┤г = explore u} {eр┤« = ╬╗ {x} Рєњ explore (f x)} (╬архЅU-ok u) (╬╗ {x} Рєњ ╬архЅU-ok (f x))
        ╬архЅU-ok XрхЂ = ╬архЅX-ok

    module FromРЪдXрхЅРЪД
             {РЪдXРЪД : РЪдРўЁРѓђРЪД X X}
             {РёЊРѓђ РёЊРѓЂ} РёЊрхБ
             (РЪдXрхЅРЪД : РЪдExploreРЪД {РёЊРѓђ} {РёЊРѓЂ} РёЊрхБ РЪдXРЪД XрхЅ XрхЅ) where
      open FromРЪдXРЪД РЪдXРЪД public

      РЪдexploreРЪД : Рѕђ {uРѓђ uРѓЂ} (u : РЪдUРЪД uРѓђ uРѓЂ) Рєњ РЪдExploreРЪД {РёЊРѓђ} {РёЊРѓЂ} РёЊрхБ (РЪдElРЪД u) (explore uРѓђ) (explore uРѓЂ)
      РЪдexploreРЪД РЪд­ЮЪўрхЂРЪД        = РЪд­ЮЪўрхЅРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ}
      РЪдexploreРЪД РЪд­ЮЪЎрхЂРЪД        = РЪд­ЮЪЎрхЅРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} {_РЅА_} {refl}
      РЪдexploreРЪД РЪд­ЮЪџрхЂРЪД        = РЪд­ЮЪџрхЅРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} {_РЅА_} {refl} {refl}
      РЪдexploreРЪД (uРѓђ РЪд├ЌрхЂРЪД uРѓЂ) = РЪдexplore├ЌРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} (РЪдexploreРЪД uРѓђ) (РЪдexploreРЪД uРѓЂ)
      РЪдexploreРЪД (uРѓђ РЪдРіјрхЂРЪД uРѓЂ) = РЪдexploreРіјРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} (РЪдexploreРЪД uРѓђ) (РЪдexploreРЪД uРѓЂ)
      РЪдexploreРЪД (РЪд╬БрхЂРЪД u f)  = РЪдexplore╬БРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} (РЪдexploreРЪД u) (РЪдexploreРЪД Рѕў f)
      РЪдexploreРЪД РЪдXрхЂРЪД        = РЪдXрхЅРЪД

    module FromРЪдXрхЅРЪДРЅА
             {РёЊРѓђ РёЊРѓЂ} РёЊрхБ
             (РЪдXрхЅРЪДРЅА : РЪдExploreРЪД {РёЊРѓђ} {РёЊРѓЂ} РёЊрхБ _РЅА_ XрхЅ XрхЅ) where
      open FromРЪдXРЪД _РЅА_ public

      РЪдexploreРЪДРЅА : Рѕђ u Рєњ РЪдExploreРЪД {РёЊРѓђ} {РёЊРѓЂ} РёЊрхБ _РЅА_ (explore u) (explore u)
      РЪдexploreРЪДРЅА ­ЮЪўрхЂ        = РЪд­ЮЪўрхЅРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ}
      РЪдexploreРЪДРЅА ­ЮЪЎрхЂ        = РЪд­ЮЪЎрхЅРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} {_РЅА_} {refl}
      РЪдexploreРЪДРЅА ­ЮЪџрхЂ        = РЪд­ЮЪџрхЅРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} {_РЅА_} {refl} {refl}
      РЪдexploreРЪДРЅА (uРѓђ ├ЌрхЂ uРѓЂ) = РЪдexplore├ЌРЪДРЅА {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} (РЪдexploreРЪДРЅА uРѓђ) (РЪдexploreРЪДРЅА uРѓЂ)
      РЪдexploreРЪДРЅА (uРѓђ РіјрхЂ uРѓЂ) = РЪдexploreРіјРЪДРЅА {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} (РЪдexploreРЪДРЅА uРѓђ) (РЪдexploreРЪДРЅА uРѓЂ)
      РЪдexploreРЪДРЅА (╬БрхЂ u F)  = РЪдexplore╬БРЪДРЅА {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} (РЪдexploreРЪДРЅА u) (╬╗ x Рєњ РЪдexploreРЪДРЅА (F x))
      РЪдexploreРЪДРЅА XрхЂ        = РЪдXрхЅРЪДРЅА

    module FromРЪдXрхЅРЪДРЅА'
             (РЪдXрхЅРЪДРЅА : Рѕђ {РёЊРѓђ РёЊРѓЂ} РёЊрхБ Рєњ РЪдExploreРЪД {РёЊРѓђ} {РёЊРѓЂ} РёЊрхБ _РЅА_ XрхЅ XрхЅ)
             (u : U) {{_ : FunExt}}{{_ : UA}} where
      open FromРЪдExploreРЪД (╬╗ {РёЊРѓЂ} {РёЊРѓѓ} РёЊрхБ Рєњ FromРЪдXрхЅРЪДРЅА.РЪдexploreРЪДРЅА {РёЊРѓЂ} {РёЊРѓѓ} РёЊрхБ (РЪдXрхЅРЪДРЅА РёЊрхБ) u) public

module FromKit
   {X : РўЁ}
   {XрхЅ : Рѕђ {РёЊ} Рєњ Explore РёЊ X}
   (XРЂ▒ : Рѕђ {РёЊ p} Рєњ ExploreInd p (XрхЅ {РёЊ}))
   (let module Xр┤▒ = FromExploreInd XРЂ▒)
   (X╦б-ok : Рѕђ{{_ : UA}}{{_ : FunExt}} Рєњ Adequate-sum Xр┤▒.sum)
   (X╦А : Рѕђ {РёЊ} Рєњ Lookup {РёЊ} XрхЅ)
   (XрХа : Рѕђ {РёЊ} Рєњ Focus {РёЊ} XрхЅ)
   (╬БрхЅX-ok : Рѕђ{{_ : UA}}{{_ : FunExt}}{РёЊ} Рєњ Adequate-╬Б {РёЊ} (╬БрхЅ XрхЅ))
   (╬архЅX-ok : Рѕђ{{_ : UA}}{{_ : FunExt}}{РёЊ} Рєњ Adequate-╬а {РёЊ} (╬архЅ XрхЅ))
   (РЪдXрхЅРЪДРЅА : Рѕђ {РёЊРѓђ РёЊРѓЂ} РёЊрхБ Рєњ РЪдExploreРЪД {РёЊРѓђ} {РёЊРѓЂ} РёЊрхБ _РЅА_ XрхЅ XрхЅ)
   where

  open FromX X public
  open FromXрхЅ XрхЅ public
  open FromXРЂ▒ XРЂ▒ public
  open FromX╦А X╦А public
  open FromXрХа XрХа public

  module _ {{_ : FunExt}}{{_ : UA}} where
    open FromX╦б-ok X╦б-ok public
    open From╬БрхЅX-ok ╬БрхЅX-ok public
    open From╬архЅX-ok ╬архЅX-ok public
    open FromРЪдXрхЅРЪДРЅА' РЪдXрхЅРЪДРЅА public

    module _ (u : U) where
      open FromAdequate-╬БрхЅ u (╬БрхЅU-ok u) public
      open FromAdequate-╬архЅ u (╬архЅU-ok u) public

      module _ (P : El u Рєњ РўЁРѓђ) where
        Dec-╬Б : ╬а (El u) (Dec Рѕў P) Рєњ Dec (╬Б (El u) P)
        Dec-╬Б = Dec-╬Б.Dec-╬Б u (focusU u) P
