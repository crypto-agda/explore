open import Level.NP
open import Type
open import Type.Identities
open import Function.NP
open import Function.Extensionality
open import Data.Zero
open import Data.One
open import Data.Two
open import Data.Product.NP
open import Data.Sum.NP
open import Data.Sum.Logical
open import Data.Nat
open import Data.Fin
open import Relation.Nullary.NP
open import Relation.Binary.PropositionalEquality.NP
open import Relation.Binary.Logical

open import HoTT
open Equivalences

open import Explore.Core
open import Explore.Properties
open import Explore.Zero
open import Explore.One
open import Explore.Two
open import Explore.Product
open import Explore.Sum
open import Explore.Explorable
import Explore.Isomorphism

module Explore.Universe where

open Operators

infixr 2 _├ЌрхЂ_

data U : РўЁ
El : U Рєњ РўЁ

data U where
  ­ЮЪўрхЂ ­ЮЪЎрхЂ ­ЮЪџрхЂ : U
  _├ЌрхЂ_ _РіјрхЂ_ : U Рєњ U Рєњ U
  ╬БрхЂ : (t : U) (f : El t Рєњ U) Рєњ U

El ­ЮЪўрхЂ = ­ЮЪў
El ­ЮЪЎрхЂ = ­ЮЪЎ
El ­ЮЪџрхЂ = ­ЮЪџ
El (s ├ЌрхЂ t) = El s ├Ќ El t
El (s РіјрхЂ t) = El s Ріј El t
El (╬БрхЂ t f) = ╬Б (El t) ╬╗ x Рєњ El (f x)

data РЪдUРЪД : РЪдРўЁРѓђРЪД U U
РЪдElРЪД : (РЪдUРЪД РЪдРєњРЪД РЪдРўЁРѓђРЪД) El El

data РЪдUРЪД where
  РЪд­ЮЪўрхЂРЪД : РЪдUРЪД ­ЮЪўрхЂ ­ЮЪўрхЂ
  РЪд­ЮЪЎрхЂРЪД : РЪдUРЪД ­ЮЪЎрхЂ ­ЮЪЎрхЂ
  РЪд­ЮЪџрхЂРЪД : РЪдUРЪД ­ЮЪџрхЂ ­ЮЪџрхЂ
  _РЪд├ЌрхЂРЪД_ : РЪдOpРѓѓРЪД РЪдUРЪД _├ЌрхЂ_ _├ЌрхЂ_
  _РЪдРіјрхЂРЪД_ : РЪдOpРѓѓРЪД РЪдUРЪД _РіјрхЂ_ _РіјрхЂ_
  РЪд╬БрхЂРЪД : (РЪе t РѕХ РЪдUРЪД РЪЕРЪдРєњРЪД (РЪдElРЪД t РЪдРєњРЪД РЪдUРЪД) РЪдРєњРЪД РЪдUРЪД) ╬БрхЂ ╬БрхЂ

РЪдElРЪД РЪд­ЮЪўрхЂРЪД = _РЅА_
РЪдElРЪД РЪд­ЮЪЎрхЂРЪД = _РЅА_
РЪдElРЪД РЪд­ЮЪџрхЂРЪД = _РЅА_
РЪдElРЪД (s РЪд├ЌрхЂРЪД t) = РЪдElРЪД s РЪд├ЌРЪД РЪдElРЪД t
РЪдElРЪД (s РЪдРіјрхЂРЪД t) = РЪдElРЪД s РЪдРіјРЪД РЪдElРЪД t
РЪдElРЪД (РЪд╬БрхЂРЪД t f) = РЪд╬БРЪД (РЪдElРЪД t) ╬╗ x Рєњ РЪдElРЪД (f x)

module _ {k} {K : РўЁ_ k} {a} {A : РўЁ_ a} {x y : A} (p : x РЅА y) where
    tr-const : tr (const K) p РЅА id
    tr-const = J (╬╗ xРѓЂ pРѓЂ Рєњ tr (const K) pРѓЂ РЅА id) refl p

    {-
РЪдUРЪД-sound : Рѕђ {{_ : FunExt}} {x y} Рєњ РЪдUРЪД x y Рєњ x РЅА y
РЪдUРЪД-refl : Рѕђ x Рєњ РЪдUРЪД x x

{-
РЪдElРЪД-refl : Рѕђ x Рєњ {!РЪдElРЪД x x!}
РЪдElРЪД-refl = {!!}
-}

РЪдUРЪД-sound РЪд­ЮЪўрхЂРЪД = refl
РЪдUРЪД-sound РЪд­ЮЪЎрхЂРЪД = refl
РЪдUРЪД-sound РЪд­ЮЪџрхЂРЪД = refl
РЪдUРЪД-sound (u РЪд├ЌрхЂРЪД uРѓЂ) = apРѓѓ _├ЌрхЂ_ (РЪдUРЪД-sound u) (РЪдUРЪД-sound uРѓЂ)
РЪдUРЪД-sound (u РЪдРіјрхЂРЪД uРѓЂ) = apРѓѓ _РіјрхЂ_ (РЪдUРЪД-sound u) (РЪдUРЪД-sound uРѓЂ)
РЪдUРЪД-sound (РЪд╬БрхЂРЪД {uРѓђ} {uРѓЂ} u {fРѓђ} {fРѓЂ} fрхБ) = apdРѓѓ ╬БрхЂ (РЪдUРЪД-sound u) (tr-Рєњ El (const U) (РЪдUРЪД-sound u) fРѓђ РѕЎ ╬╗= (╬╗ A Рєњ ap (╬╗ z Рєњ z (fРѓђ (tr El (! РЪдUРЪД-sound u) A))) (tr-const (РЪдUРЪД-sound u)) РѕЎ РЪдUРЪД-sound (fрхБ {!!}))) -- (╬╗= (╬╗ y Рєњ let foo = xрхБ {{!!}} {y} {!xрхБ!} in {!tr-Рєњ El (const U) (РЪдUРЪД-sound u)!}))

РЪдUРЪД-refl ­ЮЪўрхЂ = РЪд­ЮЪўрхЂРЪД
РЪдUРЪД-refl ­ЮЪЎрхЂ = РЪд­ЮЪЎрхЂРЪД
РЪдUРЪД-refl ­ЮЪџрхЂ = РЪд­ЮЪџрхЂРЪД
РЪдUРЪД-refl (x ├ЌрхЂ xРѓЂ) = РЪдUРЪД-refl x РЪд├ЌрхЂРЪД РЪдUРЪД-refl xРѓЂ
РЪдUРЪД-refl (x РіјрхЂ xРѓЂ) = РЪдUРЪД-refl x РЪдРіјрхЂРЪД РЪдUРЪД-refl xРѓЂ
РЪдUРЪД-refl (╬БрхЂ x f) = РЪд╬БрхЂРЪД (РЪдUРЪД-refl x) (╬╗ y Рєњ {!РЪдUРЪД-refl ?!})
-}

infix  8 _^рхЂ_
_^рхЂ_ : U Рєњ РёЋ Рєњ U
t ^рхЂ zero  = t
t ^рхЂ suc n = t ├ЌрхЂ t ^рхЂ n

module _ {РёЊ} where

    explore : Рѕђ t Рєњ Explore РёЊ (El t)
    explore ­ЮЪўрхЂ = ­ЮЪўрхЅ
    explore ­ЮЪЎрхЂ = ­ЮЪЎрхЅ
    explore ­ЮЪџрхЂ = ­ЮЪџрхЅ
    explore (s ├ЌрхЂ t) = explore s ├ЌрхЅ explore t
    explore (s РіјрхЂ t) = explore s РіјрхЅ explore t
    explore (╬БрхЂ t f) = explore╬Б (explore t) ╬╗ {x} Рєњ explore (f x)

    exploreU-ind : Рѕђ {p} t Рєњ ExploreInd p (explore t)
    exploreU-ind ­ЮЪўрхЂ = ­ЮЪўРЂ▒
    exploreU-ind ­ЮЪЎрхЂ = ­ЮЪЎРЂ▒
    exploreU-ind ­ЮЪџрхЂ = ­ЮЪџРЂ▒
    exploreU-ind (s ├ЌрхЂ t) = exploreU-ind s ├ЌРЂ▒ exploreU-ind t
    exploreU-ind (s РіјрхЂ t) = exploreU-ind s РіјРЂ▒ exploreU-ind t
    exploreU-ind (╬БрхЂ t f) = explore╬Б-ind (exploreU-ind t) ╬╗ {x} Рєњ exploreU-ind (f x)

module _ {РёЊРѓђ РёЊРѓЂ РёЊрхБ} where
    РЪдexploreРЪД : Рѕђ {tРѓђ tРѓЂ} (t : РЪдUРЪД tРѓђ tРѓЂ) Рєњ РЪдExploreРЪД {РёЊРѓђ} {РёЊРѓЂ} РёЊрхБ (РЪдElРЪД t) (explore tРѓђ) (explore tРѓЂ)
    РЪдexploreРЪД РЪд­ЮЪўрхЂРЪД        = РЪд­ЮЪўрхЅРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ}
    РЪдexploreРЪД РЪд­ЮЪЎрхЂРЪД        = РЪд­ЮЪЎрхЅРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} {_РЅА_} {refl}
    РЪдexploreРЪД РЪд­ЮЪџрхЂРЪД        = РЪд­ЮЪџрхЅРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} {_РЅА_} {refl} {refl}
    РЪдexploreРЪД (t РЪд├ЌрхЂРЪД tРѓЂ) = РЪдexplore├ЌРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} (РЪдexploreРЪД t) (РЪдexploreРЪД tРѓЂ)
    РЪдexploreРЪД (t РЪдРіјрхЂРЪД tРѓЂ) = РЪдexploreРіјРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} (РЪдexploreРЪД t) (РЪдexploreРЪД tРѓЂ)
    РЪдexploreРЪД (РЪд╬БрхЂРЪД t f)  = РЪдexplore╬БРЪД {РёЊРѓђ} {РёЊРѓЂ} {РёЊрхБ} (РЪдexploreРЪД t) (РЪдexploreРЪД Рѕў f)

module _ (t : U) where
  private
    tрхЅ : Рѕђ {РёЊ} Рєњ Explore РёЊ (El t)
    tрхЅ = explore t
    tРЂ▒ : Рѕђ {РёЊ p} Рєњ ExploreInd {РёЊ} p tрхЅ
    tРЂ▒ = exploreU-ind t

  open FromExploreInd tРЂ▒ public hiding (РЪдexploreРЪД)
  {-
  open FromРЪдExploreРЪД (╬╗ {РёЊРѓЂ} {РёЊРѓѓ} {РёЊрхБ} Рєњ РЪдexploreРЪД' {РёЊРѓЂ} {РёЊРѓѓ} {РёЊрхБ} t) public
  -}

adequate-sumU : Рѕђ {{_ : UA}}{{_ : FunExt}} t Рєњ Adequate-sum (sum t)
adequate-sumU ­ЮЪўрхЂ       = ­ЮЪў╦б-ok
adequate-sumU ­ЮЪЎрхЂ       = ­ЮЪЎ╦б-ok
adequate-sumU ­ЮЪџрхЂ       = ­ЮЪџ╦б-ok
adequate-sumU (s ├ЌрхЂ t) = adequate-sum╬Б (adequate-sumU s) (adequate-sumU t)
adequate-sumU (s РіјрхЂ t) = adequate-sumРіј (adequate-sumU s) (adequate-sumU t)
adequate-sumU (╬БрхЂ t f) = adequate-sum╬Б (adequate-sumU t) (╬╗ {x} Рєњ adequate-sumU (f x))

module _ {РёЊ} where
    lookupU : Рѕђ t Рєњ Lookup {РёЊ} (explore t)
    lookupU ­ЮЪўрхЂ = ­ЮЪў╦А
    lookupU ­ЮЪЎрхЂ = ­ЮЪЎ╦А
    lookupU ­ЮЪџрхЂ = ­ЮЪџ╦А
    lookupU (s ├ЌрхЂ t) = lookup├Ќ {eр┤г = explore s} {eр┤« = explore t} (lookupU s) (lookupU t)
    lookupU (s РіјрхЂ t) = lookupРіј {eр┤г = explore s} {eр┤« = explore t} (lookupU s) (lookupU t)
    lookupU (╬БрхЂ t f) = lookup╬Б {eр┤г = explore t} {eр┤« = ╬╗ {x} Рєњ explore (f x)} (lookupU t) (╬╗ {x} Рєњ lookupU (f x))

    focusU : Рѕђ t Рєњ Focus {РёЊ} (explore t)
    focusU ­ЮЪўрхЂ = ­ЮЪўрХа
    focusU ­ЮЪЎрхЂ = ­ЮЪЎрХа
    focusU ­ЮЪџрхЂ = ­ЮЪџрХа
    focusU (s ├ЌрхЂ t) = focus├Ќ {eр┤г = explore s} {eр┤« = explore t} (focusU s) (focusU t)
    focusU (s РіјрхЂ t) = focusРіј {eр┤г = explore s} {eр┤« = explore t} (focusU s) (focusU t)
    focusU (╬БрхЂ t f) = focus╬Б {eр┤г = explore t} {eр┤« = ╬╗ {x} Рєњ explore (f x)} (focusU t) (╬╗ {x} Рєњ focusU (f x))

    ╬БрхЅU : Рѕђ A {РёЊ} Рєњ (El A Рєњ РўЁ_ РёЊ) Рєњ РўЁ_ РёЊ
    ╬БрхЅU = ╬╗ A Рєњ ╬БрхЅ (explore A)
    ╬архЅU : Рѕђ A {РёЊ} Рєњ (El A Рєњ РўЁ_ РёЊ) Рєњ РўЁ_ РёЊ
    ╬архЅU = ╬╗ A Рєњ ╬архЅ (explore A)

    module _ {{_ : UA}}{{_ : FunExt}} where
        ╬БрхЅU-ok : Рѕђ t Рєњ Adequate-╬Б {РёЊ} (╬БрхЅU t)
        ╬БрхЅU-ok ­ЮЪўрхЂ       = ╬БрхЅ­ЮЪў-ok
        ╬БрхЅU-ok ­ЮЪЎрхЂ       = ╬БрхЅ­ЮЪЎ-ok
        ╬БрхЅU-ok ­ЮЪџрхЂ       = ╬БрхЅ­ЮЪџ-ok
        ╬БрхЅU-ok (t ├ЌрхЂ u) = ╬БрхЅ├Ќ-ok {eр┤г = explore t} {eр┤« = explore u} (╬БрхЅU-ok t) (╬БрхЅU-ok u)
        ╬БрхЅU-ok (t РіјрхЂ u) = ╬БрхЅРіј-ok {eр┤г = explore t} {eр┤« = explore u} (╬БрхЅU-ok t) (╬БрхЅU-ok u)
        ╬БрхЅU-ok (╬БрхЂ t u) = ╬БрхЅ╬Б-ok {eр┤г = explore t} {eр┤« = ╬╗ {x} Рєњ explore (u x)} (╬БрхЅU-ok t) (╬╗ {x} Рєњ ╬БрхЅU-ok (u x))

        ╬архЅU-ok : Рѕђ t Рєњ Adequate-╬а {РёЊ} (╬архЅU t)
        ╬архЅU-ok ­ЮЪўрхЂ       = ╬архЅ­ЮЪў-ok
        ╬архЅU-ok ­ЮЪЎрхЂ       = ╬архЅ­ЮЪЎ-ok
        ╬архЅU-ok ­ЮЪџрхЂ       = ╬архЅ­ЮЪџ-ok
        ╬архЅU-ok (t ├ЌрхЂ u) = ╬архЅ├Ќ-ok {eр┤г = explore t} {eр┤« = explore u} (╬архЅU-ok t) (╬архЅU-ok u)
        ╬архЅU-ok (t РіјрхЂ u) = ╬архЅРіј-ok {eр┤г = explore t} {eр┤« = explore u} (╬архЅU-ok t) (╬архЅU-ok u)
        ╬архЅU-ok (╬БрхЂ t u) = ╬архЅ╬Б-ok {eр┤г = explore t} {eр┤« = ╬╗ {x} Рєњ explore (u x)} (╬архЅU-ok t) (╬╗ {x} Рєњ ╬архЅU-ok (u x))

{-
module _ (t : U) {{_ : UA}} {{_ : FunExt}} where
  open FromAdequate-╬БрхЅ t (╬БрхЅU-ok t) public
  open FromAdequate-╬архЅ t (╬архЅU-ok t) public
-}

module _ (A : U) (P : El A Рєњ РўЁРѓђ) where
    Dec-╬Б : ╬а (El A) (Dec Рѕў P) Рєњ Dec (╬Б (El A) P)
    Dec-╬Б = map-Dec (unfocus A) (focusU A) Рѕў lift-Dec A P Рѕў reify A

-- See Explore.Fin for an example of the use of this module
module Isomorphism {A : РўЁРѓђ} u (e : El u РЅЃ A) where
  open Explore.Isomorphism e

  module _ {РёЊ} where
    isoрхЅ : Explore РёЊ A
    isoрхЅ = explore-iso (explore u)

    module _ {p} where
      isoРЂ▒ : ExploreInd p isoрхЅ
      isoРЂ▒ = explore-iso-ind (exploreU-ind u)

  module _ {РёЊ} where
  {-
    iso╦А : Lookup {РёЊ} isoрхЅ
    iso╦А = lookup-iso {РёЊ} {exploreU u} (lookupU u)

    isoрХа : Focus {РёЊ} isoрхЅ
    isoрХа = focus-iso {РёЊ} {exploreU u} (focusU u)
    -}

    iso╩│ : Reify {РёЊ} isoрхЅ
    iso╩│ = FromExploreInd-iso.reify (exploreU-ind u)

    isoрхў : Unfocus {РёЊ} isoрхЅ
    isoрхў = FromExploreInd-iso.unfocus (exploreU-ind u)

  iso╦б : Sum A
  iso╦б = sum-iso (sum u)

  isoрхќ : Product A
  isoрхќ = product-iso (sum u)

  module _ {{_ : UA}}{{_ : FunExt}} where
    iso╦б-ok : Adequate-sum iso╦б
    iso╦б-ok = sum-iso-ok (adequate-sumU u)

    open Adequate-sumРѓђ iso╦б-ok iso╦б-ok public renaming (sumStableUnder to iso╦б-stableUnder)

FinрхЂ : РёЋ Рєњ U
FinрхЂ zero    = ­ЮЪўрхЂ
FinрхЂ (suc n) = ­ЮЪЎрхЂ РіјрхЂ FinрхЂ n

FinрхЂ' : РёЋ Рєњ U
FinрхЂ' zero          = ­ЮЪўрхЂ
FinрхЂ' (suc zero)    = ­ЮЪЎрхЂ
FinрхЂ' (suc (suc n)) = ­ЮЪЎрхЂ РіјрхЂ FinрхЂ' (suc n)

FinрхЂ-Fin : Рѕђ n Рєњ El (FinрхЂ n) РЅЃ Fin n
FinрхЂ-Fin zero    = РЅЃ-! Fin0РЅЃ­ЮЪў
FinрхЂ-Fin (suc n) = РіјРЅЃ РЅЃ-refl (FinрхЂ-Fin n) РЅЃ-РѕЎ РЅЃ-! FinРѕўsucРЅЃ­ЮЪЎРіјFin

FinрхЂ'-Fin : Рѕђ n Рєњ El (FinрхЂ' n) РЅЃ Fin n
FinрхЂ'-Fin zero          = РЅЃ-! Fin0РЅЃ­ЮЪў
FinрхЂ'-Fin (suc zero)    = РЅЃ-! Fin1РЅЃ­ЮЪЎ
FinрхЂ'-Fin (suc (suc n)) = РіјРЅЃ РЅЃ-refl (FinрхЂ'-Fin (suc n)) РЅЃ-РѕЎ РЅЃ-! FinРѕўsucРЅЃ­ЮЪЎРіјFin

╬архЂ : (u : U) (v : El u Рєњ U) Рєњ U
╬архЂ ­ЮЪўрхЂ        v = ­ЮЪЎрхЂ
╬архЂ ­ЮЪЎрхЂ        v = v _
╬архЂ ­ЮЪџрхЂ        v = v 0Рѓѓ ├ЌрхЂ v 1Рѓѓ
╬архЂ (u ├ЌрхЂ uРѓЂ) v = ╬архЂ u ╬╗ x Рєњ ╬архЂ uРѓЂ ╬╗ y Рєњ v (x , y)
╬архЂ (u РіјрхЂ uРѓЂ) v = (╬архЂ u (v Рѕў inl)) ├ЌрхЂ (╬архЂ uРѓЂ (v Рѕў inr))
╬архЂ (╬БрхЂ u f)  v = ╬архЂ u ╬╗ x Рєњ ╬архЂ (f x) (v Рѕў _,_ x)

_РєњрхЂ_ : (u : U) (v : U) Рєњ U
u РєњрхЂ v = ╬архЂ u (const v)

{-
­ЮЪЏрхЂ : U
­ЮЪЏрхЂ = ­ЮЪЎрхЂ РіјрхЂ ­ЮЪџрхЂ

list22 = list (­ЮЪџрхЂ РєњрхЂ ­ЮЪџрхЂ)
list33 = list (­ЮЪЏрхЂ РєњрхЂ ­ЮЪЏрхЂ)
-}

module _ {{_ : UA}}{{_ : FunExt}} where
    ╬архЂ-╬а : Рѕђ u v Рєњ El (╬архЂ u v) РЅА ╬а (El u) (El Рѕў v)
    ╬архЂ-╬а ­ЮЪўрхЂ        v = ! ╬а­ЮЪў-uniqРѓђ _
    ╬архЂ-╬а ­ЮЪЎрхЂ        v = ! ╬а­ЮЪЎ-uniq _
    ╬архЂ-╬а ­ЮЪџрхЂ        v = ! ╬а­ЮЪџ-├Ќ
    ╬архЂ-╬а (u ├ЌрхЂ uРѓЂ) v = ╬архЂ-╬а u (╬╗ x Рєњ ╬архЂ uРѓЂ (v Рѕў _,_ x)) РѕЎ ╬а=Рђ▓ _ (╬╗ _ Рєњ ╬архЂ-╬а uРѓЂ _) РѕЎ ! ╬а╬Б-curry
    ╬архЂ-╬а (u РіјрхЂ uРѓЂ) v = ├Ќ= (╬архЂ-╬а u (v Рѕў inl)) (╬архЂ-╬а uРѓЂ (v Рѕў inr)) РѕЎ ! dist-├Ќ-╬а
    ╬архЂ-╬а (╬БрхЂ u f)  v = ╬архЂ-╬а u (╬╗ x Рєњ ╬архЂ (f _) (v Рѕў _,_ x)) РѕЎ ╬а=Рђ▓ _ (╬╗ _ Рєњ ╬архЂ-╬а (f _) _) РѕЎ ! ╬а╬Б-curry

    РєњрхЂ-Рєњ : Рѕђ u v Рєњ El (u РєњрхЂ v) РЅА (El u Рєњ El v)
    РєњрхЂ-Рєњ u v = ╬архЂ-╬а u (const v)

    ╬архЂРєњ╬а : Рѕђ u v Рєњ El (╬архЂ u v) Рєњ ╬а (El u) (El Рѕў v)
    ╬архЂРєњ╬а ­ЮЪўрхЂ v xРѓѓ ()
    ╬архЂРєњ╬а ­ЮЪЎрхЂ v xРѓѓ xРѓЃ = xРѓѓ
    ╬архЂРєњ╬а ­ЮЪџрхЂ v (x , y) 0Рѓѓ = x
    ╬архЂРєњ╬а ­ЮЪџрхЂ v (x , y) 1Рѓѓ = y
    ╬архЂРєњ╬а (u ├ЌрхЂ uРѓЂ) v x (z , t) = ╬архЂРєњ╬а uРѓЂ (v Рѕў _,_ z) (╬архЂРєњ╬а u (╬╗ x Рєњ ╬архЂ uРѓЂ (v Рѕў _,_ x)) x z) t
    ╬архЂРєњ╬а (u РіјрхЂ _) v (x , _) (inl y) = ╬архЂРєњ╬а u (v Рѕў inl) x y
    ╬архЂРєњ╬а (_ РіјрхЂ u) v (_ , x) (inr y) = ╬архЂРєњ╬а u (v Рѕў inr) x y
    ╬архЂРєњ╬а (╬БрхЂ u f) v x       (y , z) = ╬архЂРєњ╬а (f _) (v Рѕў _,_ y) (╬архЂРєњ╬а u (╬╗ x Рєњ ╬архЂ (f _) (v Рѕў _,_ x)) x y) z

    РєњрхЂРєњРєњ : Рѕђ u v Рєњ El (u РєњрхЂ v) Рєњ (El u Рєњ El v)
    РєњрхЂРєњРєњ u v = ╬архЂРєњ╬а u (const v)

-- -}
-- -}
-- -}
-- -}
-- -}
