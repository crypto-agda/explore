{-# OPTIONS --without-K #-}
open import Type using (TypeРѓђ; Type_)
open import Type.Identities
open import Function.NP using (╬а; _Рѕў_; const)
open import Function.Extensionality using (FunExt)
open import Data.One using (0РѓЂ)
open import Data.Two.Base using (0Рѓѓ; 1Рѓѓ)
open import Data.Product.NP using (_,_; fst)
open import Data.Sum.NP using (inl; inr)
open import Relation.Binary.PropositionalEquality.NP using (_РЅА_; idp; ap; !_; _РѕЎ_; tr)
open import HoTT using (ua; UA; module Equivalences)
open        Equivalences using (_РЅЃ_)

open import Explore.Core
open import Explore.Zero
open import Explore.One
open import Explore.Two
open import Explore.Product
open        Explore.Product.Operators
open import Explore.Sum
open import Explore.Properties
open import Explore.Explorable
open import Explore.Isomorphism
import      Explore.Universe.Type

module Explore.Universe.FromE
  (X : TypeРѓђ) (XрхЅ : Рѕђ {РёЊ} Рєњ Explore РёЊ X) where

open Explore.Universe.Type {X}

explore : Рѕђ {РёЊ} u Рєњ Explore РёЊ (El u)
explore ­ЮЪўрхЂ = ­ЮЪўрхЅ
explore ­ЮЪЎрхЂ = ­ЮЪЎрхЅ
explore ­ЮЪџрхЂ = ­ЮЪџрхЅ
explore (uРѓђ ├ЌрхЂ uРѓЂ) = explore uРѓђ ├ЌрхЅ explore uРѓЂ
explore (uРѓђ РіјрхЂ uРѓЂ) = explore uРѓђ РіјрхЅ explore uРѓЂ
explore (╬БрхЂ u f) = explore╬Б (explore u) ╬╗ {x} Рєњ explore (f x)
explore XрхЂ = XрхЅ
explore (РЅЃрхЂ u A e) = explore-iso e (explore u)

module FromXРЂ▒ (XРЂ▒ : Рѕђ {РёЊ p} Рєњ ExploreInd p (XрхЅ {РёЊ})) where
  explore-ind : Рѕђ {РёЊ p} u Рєњ ExploreInd {РёЊ} p (explore u)
  explore-ind ­ЮЪўрхЂ = ­ЮЪўРЂ▒
  explore-ind ­ЮЪЎрхЂ = ­ЮЪЎРЂ▒
  explore-ind ­ЮЪџрхЂ = ­ЮЪџРЂ▒
  explore-ind (uРѓђ ├ЌрхЂ uРѓЂ) = explore-ind uРѓђ ├ЌРЂ▒ explore-ind uРѓЂ
  explore-ind (uРѓђ РіјрхЂ uРѓЂ) = explore-ind uРѓђ РіјРЂ▒ explore-ind uРѓЂ
  explore-ind (╬БрхЂ u f) = explore╬Б-ind (explore-ind u) ╬╗ {x} Рєњ explore-ind (f x)
  explore-ind XрхЂ = XРЂ▒
  explore-ind (РЅЃрхЂ u A e) = explore-iso-ind e (explore-ind u)

  module _ (u : U) where
    private
      uрхЅ : Рѕђ {РёЊ} Рєњ Explore РёЊ (El u)
      uрхЅ = explore u
      uРЂ▒ : Рѕђ {РёЊ p} Рєњ ExploreInd {РёЊ} p uрхЅ
      uРЂ▒ = explore-ind u

    open FromExploreInd uРЂ▒ public hiding (РЪдexploreРЪД)

    ╬БрхЅU : Рѕђ {РёЊ} Рєњ (El u Рєњ Type РёЊ) Рєњ Type РёЊ
    ╬БрхЅU = ╬БрхЅ uрхЅ
    ╬архЅU : Рѕђ {РёЊ} Рєњ (El u Рєњ Type РёЊ) Рєњ Type РёЊ
    ╬архЅU = ╬архЅ uрхЅ

  module Xр┤▒ = FromExploreInd XРЂ▒
  ╬БрхЅX : Рѕђ {РёЊ} Рєњ (X Рєњ Type РёЊ) Рєњ Type РёЊ
  ╬БрхЅX = ╬БрхЅ XрхЅ
  ╬архЅX : Рѕђ {РёЊ} Рєњ (X Рєњ Type РёЊ) Рєњ Type РёЊ
  ╬архЅX = ╬архЅ XрхЅ

  open Adequacy _РЅА_
  module FromX╦б-ok (X╦б-ok : Adequate-sum Xр┤▒.sum){{_ : UA}}{{_ : FunExt}} where
    adequate-sum : Рѕђ u Рєњ Adequate-sum (sum u)
    adequate-sum ­ЮЪўрхЂ       = ­ЮЪў╦б-ok
    adequate-sum ­ЮЪЎрхЂ       = ­ЮЪЎ╦б-ok
    adequate-sum ­ЮЪџрхЂ       = ­ЮЪџ╦б-ok
    adequate-sum (uРѓђ ├ЌрхЂ uРѓЂ) = adequate-sum╬Б (adequate-sum uРѓђ) (adequate-sum uРѓЂ)
    adequate-sum (uРѓђ РіјрхЂ uРѓЂ) = adequate-sumРіј (adequate-sum uРѓђ) (adequate-sum uРѓЂ)
    adequate-sum (╬БрхЂ u f) = adequate-sum╬Б (adequate-sum u) (╬╗ {x} Рєњ adequate-sum (f x))
    adequate-sum XрхЂ = X╦б-ok
    adequate-sum (РЅЃрхЂ u A e) = sum-iso-ok e (adequate-sum u)

  module FromX╦А (X╦А : Рѕђ {РёЊ} Рєњ Lookup {РёЊ} XрхЅ) where
    lookup : Рѕђ {РёЊ} u Рєњ Lookup {РёЊ} (explore u)
    lookup ­ЮЪўрхЂ = ­ЮЪў╦А
    lookup ­ЮЪЎрхЂ = ­ЮЪЎ╦А
    lookup ­ЮЪџрхЂ = ­ЮЪџ╦А
    lookup (uРѓђ ├ЌрхЂ uРѓЂ) = lookup├Ќ {eр┤г = explore uРѓђ} {eр┤« = explore uРѓЂ} (lookup uРѓђ) (lookup uРѓЂ)
    lookup (uРѓђ РіјрхЂ uРѓЂ) = lookupРіј {eр┤г = explore uРѓђ} {eр┤« = explore uРѓЂ} (lookup uРѓђ) (lookup uРѓЂ)
    lookup (╬БрхЂ u f) = lookup╬Б {eр┤г = explore u} {eр┤« = ╬╗ {x} Рєњ explore (f x)} (lookup u) (╬╗ {x} Рєњ lookup (f x))
    lookup XрхЂ = X╦А
    lookup (РЅЃрхЂ u A e) = lookup-iso e {AрхЅ = explore u} (lookup u)

  module FromXрХа (XрХа : Рѕђ {РёЊ} Рєњ Focus {РёЊ} XрхЅ) where
    focus : Рѕђ {РёЊ} u Рєњ Focus {РёЊ} (explore u)
    focus ­ЮЪўрхЂ = ­ЮЪўрХа
    focus ­ЮЪЎрхЂ = ­ЮЪЎрХа
    focus ­ЮЪџрхЂ = ­ЮЪџрХа
    focus (uРѓђ ├ЌрхЂ uРѓЂ) = focus├Ќ {eр┤г = explore uРѓђ} {eр┤« = explore uРѓЂ} (focus uРѓђ) (focus uРѓЂ)
    focus (uРѓђ РіјрхЂ uРѓЂ) = focusРіј {eр┤г = explore uРѓђ} {eр┤« = explore uРѓЂ} (focus uРѓђ) (focus uРѓЂ)
    focus (╬БрхЂ u f) = focus╬Б {eр┤г = explore u} {eр┤« = ╬╗ {x} Рєњ explore (f x)} (focus u) (╬╗ {x} Рєњ focus (f x))
    focus XрхЂ = XрХа
    focus (РЅЃрхЂ u A e) = focus-iso e {AрхЅ = explore u} (focus u)

  module From╬БрхЅX-ok (╬БрхЅX-ok : Рѕђ {РёЊ} Рєњ Adequate-╬Б {РёЊ} ╬БрхЅX){{_ : UA}}{{_ : FunExt}} where
    ╬БрхЅ-ok : Рѕђ {РёЊ} u Рєњ Adequate-╬Б {РёЊ} (╬БрхЅU u)
    ╬БрхЅ-ok ­ЮЪўрхЂ       = ╬БрхЅ­ЮЪў-ok
    ╬БрхЅ-ok ­ЮЪЎрхЂ       = ╬БрхЅ­ЮЪЎ-ok
    ╬БрхЅ-ok ­ЮЪџрхЂ       = ╬БрхЅ­ЮЪџ-ok
    ╬БрхЅ-ok (uРѓђ ├ЌрхЂ u) = ╬БрхЅ├Ќ-ok {eр┤г = explore uРѓђ} {eр┤« = explore u} (╬БрхЅ-ok uРѓђ) (╬БрхЅ-ok u)
    ╬БрхЅ-ok (uРѓђ РіјрхЂ u) = ╬БрхЅРіј-ok {eр┤г = explore uРѓђ} {eр┤« = explore u} (╬БрхЅ-ok uРѓђ) (╬БрхЅ-ok u)
    ╬БрхЅ-ok (╬БрхЂ u f) = ╬БрхЅ╬Б-ok {eр┤г = explore u} {eр┤« = ╬╗ {x} Рєњ explore (f x)} (╬БрхЅ-ok u) (╬╗ {x} Рєњ ╬БрхЅ-ok (f x))
    ╬БрхЅ-ok XрхЂ = ╬БрхЅX-ok
    ╬БрхЅ-ok (РЅЃрхЂ u A e) = ╬Б-iso-ok e {AрхЅ = explore u} (╬БрхЅ-ok u)

  module From╬архЅX-ok (╬архЅX-ok : Рѕђ {РёЊ} Рєњ Adequate-╬а {РёЊ} ╬архЅX){{_ : UA}}{{_ : FunExt}} where
    ╬архЅ-ok : Рѕђ {РёЊ} u Рєњ Adequate-╬а {РёЊ} (╬архЅU u)
    ╬архЅ-ok ­ЮЪўрхЂ       = ╬архЅ­ЮЪў-ok
    ╬архЅ-ok ­ЮЪЎрхЂ       = ╬архЅ­ЮЪЎ-ok
    ╬архЅ-ok ­ЮЪџрхЂ       = ╬архЅ­ЮЪџ-ok
    ╬архЅ-ok (uРѓђ ├ЌрхЂ u) = ╬архЅ├Ќ-ok {eр┤г = explore uРѓђ} {eр┤« = explore u} (╬архЅ-ok uРѓђ) (╬архЅ-ok u)
    ╬архЅ-ok (uРѓђ РіјрхЂ u) = ╬архЅРіј-ok {eр┤г = explore uРѓђ} {eр┤« = explore u} (╬архЅ-ok uРѓђ) (╬архЅ-ok u)
    ╬архЅ-ok (╬БрхЂ u f) = ╬архЅ╬Б-ok {eр┤г = explore u} {eр┤« = ╬╗ {x} Рєњ explore (f x)} (╬архЅ-ok u) (╬╗ {x} Рєњ ╬архЅ-ok (f x))
    ╬архЅ-ok XрхЂ = ╬архЅX-ok
    ╬архЅ-ok (РЅЃрхЂ u A e) = ╬а-iso-ok e {AрхЅ = explore u} (╬архЅ-ok u)

module FromРЪдXрхЅРЪДРЅА (РЪдXрхЅРЪДРЅА : Рѕђ {РёЊРѓђ РёЊРѓЂ} РёЊрхБ Рєњ РЪдExploreРЪД {РёЊРѓђ} {РёЊРѓЂ} РёЊрхБ _РЅА_ XрхЅ XрхЅ) {РёЊРѓђ РёЊРѓЂ} РёЊрхБ where
  РЪдexploreРЪДРЅА : Рѕђ u Рєњ РЪдExploreРЪД {РёЊРѓђ} {РёЊРѓЂ} РёЊрхБ _РЅА_ (explore u) (explore u)
  РЪдexploreРЪДРЅА ­ЮЪўрхЂ        = РЪд­ЮЪўрхЅРЪД {РёЊрхБ = РёЊрхБ}
  РЪдexploreРЪДРЅА ­ЮЪЎрхЂ        = РЪд­ЮЪЎрхЅРЪД {РёЊрхБ = РёЊрхБ} {_РЅА_} {idp}
  РЪдexploreРЪДРЅА ­ЮЪџрхЂ        = РЪд­ЮЪџрхЅРЪД {РёЊрхБ = РёЊрхБ} {_РЅА_} {idp} {idp}
  РЪдexploreРЪДРЅА (uРѓђ ├ЌрхЂ uРѓЂ) = РЪдexplore├ЌРЪДРЅА {РёЊрхБ = РёЊрхБ} (РЪдexploreРЪДРЅА uРѓђ) (РЪдexploreРЪДРЅА uРѓЂ)
  РЪдexploreРЪДРЅА (uРѓђ РіјрхЂ uРѓЂ) = РЪдexploreРіјРЪДРЅА {РёЊрхБ = РёЊрхБ} (РЪдexploreРЪДРЅА uРѓђ) (РЪдexploreРЪДРЅА uРѓЂ)
  РЪдexploreРЪДРЅА (╬БрхЂ u F)  = РЪдexplore╬БРЪДРЅА {РёЊрхБ = РёЊрхБ} (РЪдexploreРЪДРЅА u) (╬╗ x Рєњ РЪдexploreРЪДРЅА (F x))
  РЪдexploreРЪДРЅА XрхЂ        = РЪдXрхЅРЪДРЅА РёЊрхБ
  РЪдexploreРЪДРЅА (РЅЃрхЂ u A e) = РЪдexplore-isoРЪД e {РёЊрхБ = РёЊрхБ} (ap (fst e)) (РЪдexploreРЪДРЅА u)

module From╬аX (╬аX : (X Рєњ U) Рєњ U) where
  ╬архЂ : (u : U) (v : El u Рєњ U) Рєњ U
  ╬архЂ ­ЮЪўрхЂ        v = ­ЮЪЎрхЂ
  ╬архЂ ­ЮЪЎрхЂ        v = v _
  ╬архЂ ­ЮЪџрхЂ        v = v 0Рѓѓ ├ЌрхЂ v 1Рѓѓ
  ╬архЂ (u ├ЌрхЂ uРѓЂ) v = ╬архЂ u ╬╗ x Рєњ ╬архЂ uРѓЂ ╬╗ y Рєњ v (x , y)
  ╬архЂ (u РіјрхЂ uРѓЂ) v = (╬архЂ u (v Рѕў inl)) ├ЌрхЂ (╬архЂ uРѓЂ (v Рѕў inr))
  ╬архЂ (╬БрхЂ u f)  v = ╬архЂ u ╬╗ x Рєњ ╬архЂ (f x) (v Рѕў _,_ x)
  ╬архЂ XрхЂ        v = ╬аX v
  ╬архЂ (РЅЃрхЂ u A e)v = ╬архЂ u (v Рѕў fst e)

  _РєњрхЂ_ : (u : U) (v : U) Рєњ U
  u РєњрхЂ v = ╬архЂ u (const v)

  module From╬аXРЅЃ (╬аXРЅЃ : Рѕђ v Рєњ El (╬аX v) РЅЃ ╬а X (El Рѕў v)) where
    private
      module ╬аXРЅЃ {v} = Equivalences.Equiv (╬аXРЅЃ v)

    module _ {{_ : FunExt}}{{_ : UA}} where
      ╬архЂ-╬а : Рѕђ u v Рєњ El (╬архЂ u v) РЅА ╬а (El u) (El Рѕў v)
      ╬архЂ-╬а ­ЮЪўрхЂ        v = ! ╬а­ЮЪў-uniqРѓђ _
      ╬архЂ-╬а ­ЮЪЎрхЂ        v = ! ╬а­ЮЪЎ-uniq _
      ╬архЂ-╬а ­ЮЪџрхЂ        v = ! ╬а­ЮЪџ-├Ќ
      ╬архЂ-╬а (u ├ЌрхЂ uРѓЂ) v = ╬архЂ-╬а u (╬╗ x Рєњ ╬архЂ uРѓЂ (v Рѕў _,_ x)) РѕЎ ╬а=Рђ▓ _ (╬╗ _ Рєњ ╬архЂ-╬а uРѓЂ _) РѕЎ ! ╬а╬Б-curry
      ╬архЂ-╬а (u РіјрхЂ uРѓЂ) v = ├Ќ= (╬архЂ-╬а u (v Рѕў inl)) (╬архЂ-╬а uРѓЂ (v Рѕў inr)) РѕЎ ! dist-├Ќ-╬а
      ╬архЂ-╬а (╬БрхЂ u f)  v = ╬архЂ-╬а u (╬╗ x Рєњ ╬архЂ (f _) (v Рѕў _,_ x)) РѕЎ ╬а=Рђ▓ _ (╬╗ _ Рєњ ╬архЂ-╬а (f _) _) РѕЎ ! ╬а╬Б-curry
      ╬архЂ-╬а XрхЂ        v = ua (╬аXРЅЃ v)
      ╬архЂ-╬а (РЅЃрхЂ u A e)v = ╬архЂ-╬а u (v Рѕў fst e) РѕЎ ╬аРЅЃ e ╬╗ _ Рєњ idp

      РєњрхЂ-Рєњ : Рѕђ u v Рєњ El (u РєњрхЂ v) РЅА (El u Рєњ El v)
      РєњрхЂ-Рєњ u v = ╬архЂ-╬а u (const v)

    ╬архЂРєњ╬а : Рѕђ u v Рєњ El (╬архЂ u v) Рєњ ╬а (El u) (El Рѕў v)
    ╬архЂРєњ╬а ­ЮЪўрхЂ v xРѓѓ ()
    ╬архЂРєњ╬а ­ЮЪЎрхЂ v xРѓѓ xРѓЃ = xРѓѓ
    ╬архЂРєњ╬а ­ЮЪџрхЂ v (x , y) 0Рѓѓ = x
    ╬архЂРєњ╬а ­ЮЪџрхЂ v (x , y) 1Рѓѓ = y
    ╬архЂРєњ╬а (u ├ЌрхЂ uРѓЂ) v x (z , t) = ╬архЂРєњ╬а uРѓЂ (v Рѕў _,_ z) (╬архЂРєњ╬а u (╬╗ x Рєњ ╬архЂ uРѓЂ (v Рѕў _,_ x)) x z) t
    ╬архЂРєњ╬а (u РіјрхЂ _) v (x , _) (inl y) = ╬архЂРєњ╬а u (v Рѕў inl) x y
    ╬архЂРєњ╬а (_ РіјрхЂ u) v (_ , x) (inr y) = ╬архЂРєњ╬а u (v Рѕў inr) x y
    ╬архЂРєњ╬а (╬БрхЂ u f) v x       (y , z) = ╬архЂРєњ╬а (f _) (v Рѕў _,_ y) (╬архЂРєњ╬а u (╬╗ x Рєњ ╬архЂ (f _) (v Рѕў _,_ x)) x y) z
    ╬архЂРєњ╬а XрхЂ v = ╬аXРЅЃ.┬иРєњ
    ╬архЂРєњ╬а (РЅЃрхЂ u A e) v f x = tr (El Рѕў v) (┬иРєљ-inv-r x) (╬архЂРєњ╬а u (v Рѕў ┬иРєњ) f (┬иРєљ x))
      where open Equivalences.Equiv e

    ╬аРєњ╬архЂ : Рѕђ u v Рєњ ╬а (El u) (El Рѕў v) Рєњ El (╬архЂ u v)
    ╬аРєњ╬архЂ ­ЮЪўрхЂ v f = 0РѓЂ
    ╬аРєњ╬архЂ ­ЮЪЎрхЂ v f = f 0РѓЂ
    ╬аРєњ╬архЂ ­ЮЪџрхЂ v f = f 0Рѓѓ , f 1Рѓѓ
    ╬аРєњ╬архЂ (u ├ЌрхЂ uРѓЂ) v f = ╬аРєњ╬архЂ u (╬╗ x Рєњ ╬архЂ uРѓЂ (v Рѕў _,_ x))
                           (╬╗ x Рєњ ╬аРєњ╬архЂ uРѓЂ (v Рѕў _,_ x) (f Рѕў _,_ x))
    ╬аРєњ╬архЂ (u РіјрхЂ uРѓЂ) v f = ╬аРєњ╬архЂ u (v Рѕў inl) (f Рѕў inl) ,
                           ╬аРєњ╬архЂ uРѓЂ (v Рѕў inr) (f Рѕў inr)
    ╬аРєњ╬архЂ (╬БрхЂ u F) v f = ╬аРєњ╬архЂ u (╬╗ x Рєњ ╬архЂ (F x) (v Рѕў _,_ x))
                          (╬╗ x Рєњ ╬аРєњ╬архЂ (F x) (v Рѕў _,_ x) (f Рѕў _,_ x))
    ╬аРєњ╬архЂ XрхЂ v = ╬аXРЅЃ.┬иРєљ
    ╬аРєњ╬архЂ (РЅЃрхЂ u A e) v f = ╬аРєњ╬архЂ u (v Рѕў ┬иРєњ) (f Рѕў ┬иРєњ)
      where open Equivalences.Equiv e

    РєњрхЂРєњРєњ : Рѕђ u v Рєњ El (u РєњрхЂ v) Рєњ (El u Рєњ El v)
    РєњрхЂРєњРєњ u v = ╬архЂРєњ╬а u (const v)

    РєњРєњРєњрхЂ : Рѕђ u v Рєњ (El u Рєњ El v) Рєњ El (u РєњрхЂ v)
    РєњРєњРєњрхЂ u v = ╬аРєњ╬архЂ u (const v)
